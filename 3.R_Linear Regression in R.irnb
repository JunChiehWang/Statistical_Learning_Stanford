{"cells":[{"metadata":{"_uuid":"593022dc11b423330834c98d8f2384198645a266","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"309f94f10edd62f8c521431763d072379bdf5912"},"cell_type":"code","source":"# \n# https://youtu.be/5ONFqIk3RFg\n#","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3cd5024ec9410a5978b30b7ded3eecb7ff85318b"},"cell_type":"code","source":"#\n# MASS: Support Functions and Datasets for Venables and Ripley's MASS\n# ISLR: Data for an Introduction to Statistical Learning with Applications in R\n#\nlibrary(MASS)\nlibrary(ISLR)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"500dbadd4f63304fd5ad73ae538193eed84ae090"},"cell_type":"code","source":"# see name of the variables\nnames(Boston)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5aafbc42c69559fc2208f1288590b1ae7dee290b"},"cell_type":"code","source":"# And so if you want more detail, you're going to ask\n# for help on Boston.\n?Boston\n# It's got 506 rows and 14 columns.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"35c0b5f86532ba5de56996f49f86c89547aee22e"},"cell_type":"code","source":"### Simple linear regression\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"61e4c64cb3a9d21e2484e30150f99429e1092077"},"cell_type":"code","source":"# plot some variables: medv and lstat\n# the response is medv (on vertical axis)\n# find these variables in data set Boston\n\n# plot(Boston$lstat,Boston$medv) \n# or \nplot(medv~lstat,Boston)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c1612fa0ecdc898a6149acca99a67e4cc3b71cd9"},"cell_type":"code","source":"# medv : response\n# ~ : is modeled as\n# lstat: single predictor\nfit1=lm(medv~lstat,data=Boston)\nfit1\n# you can see its a negative relationship\n# it gives you a brif summary\n\npar(mfrow=c(2,2))\nplot(fit1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4b6e561361d24b75bb25678a6f7cae065d74f13e"},"cell_type":"code","source":"# get more detail of summary\nsummary(fit1)\n# both of intercept and lstat are significant","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3c668af005ec3d2803297728e465690f42023697"},"cell_type":"code","source":"# add linear model line to the plot\n# need to plot before abline\nplot(medv~lstat,Boston)\nabline(fit1,col=\"red\")\n#?abline","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0e2efacbf9fe578805adb46b1f32d03017dad0ed"},"cell_type":"code","source":"names(fit1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"92704e2c2fdfb0eb964044d547bb4448f32be368"},"cell_type":"code","source":"# find the confident interval for the fit\nconfint(fit1)\n#?confint","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8aa5dd7fa66aab48eb5c2c9962905fda516daa31"},"cell_type":"code","source":"# The predict function is another one of these methods\n# where we can use to query a linear model fit.\n# In this case, we're going to predict with three new values\n# for lstat, or three particular values, five, 10, and 15.\n# 3 And we're going to not only ask for predictions, we're\n# going to ask for a confidence interval.\n# So those are additional arguments to predict.\npredict(fit1,data.frame(lstat=c(5,10,15)),interval=\"confidence\")\n# And when we do that, we get the fit at those three values,\n# and then the lower confidence interval, and the upper\n# confidence band.\n\n# https://stackoverflow.com/questions/38109501/how-does-predict-lm-compute-confidence-interval-and-prediction-interval","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e582b31cfd8b762b3d545204b7c8d85c224fa598"},"cell_type":"code","source":"### Multiple linear regression","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8c53c78c6a6c91af79e91946bfe14ff9b85588b9"},"cell_type":"code","source":"# we wanna fit lstat and age\n# we seperate variables with +\nfit2=lm(medv~lstat+age,data=Boston)\nsummary(fit2)\n# And age is also significant, quite strongly so, but not as significant lstat.\n# One of the things down below is the r squared, which we talked about as well, for the model.\n# Remember, r squared, it's the higher the better. It's a percentage of variance explained.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cc8d10abd0797f6d5d1fa9be7118968746f24096"},"cell_type":"code","source":"# And ~. means is that we're supposed to use all\n# the other variables in the Boston data frame except medv,\n# which is the response, and all the others will be predictors.\nfit3=lm(medv~.,Boston)\nsummary(fit3)\n# Age, now, is no longer significant.\n# So age, when it was in the model just with lstat, was\n# significant. But now it's in the model with all these other predictors.\n# And it's no longer significant. What that means is there's basically a lot of other\n# predictors that are very correlated with age.\n# And in the presence of them, age is no longer required.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5b7abc07301356a74996f0959638cdfda8b15f62"},"cell_type":"code","source":"# You can plot linear models.\n# I made a two by two layout, because I know that four plots\npar(mfrow=c(2,2))\nplot(fit3)\n\n# The first one is the residuals against the fitted values.\n# The vector fitted values is just a single vector.\n# So we can plot the residuals against that.\n# And the reason we do that is we are looking for non-linearities.\n# And we kind of know there's a non-linearity in this one.\n# We saw that in the very first plot. And by the curve in the residuals here, we can see\n# that the model is not quite capturing everything that's going on.\n# There seems to be some non-linearity.\n\n# This lower left one, is the square root of the absolute standardized residuals.\n# One plots this to see, perhaps, if the variance is changing with the mean or the fit.\n# In this case, it looks like there may be some relationship there.\n# But that could be a result of a non-linearity that we seem\n# to have missed in the model.\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c2a0c8e6763340fa130f4c95620e172789d785bd"},"cell_type":"code","source":"# Twiddle means--nothing on the left means we're going to\n# use the same response, \n# . means whatever the model was in fit3, That's replaced in dot.\n# And minus age means we want to remove age.\n# And minus indus, we want to remove indus as well.\n# So this will fit the model with those two variables removed, all the others in.\nfit4=update(fit3,~.-age-indus)\nsummary(fit4)\n# And now everything that's left in the model appears to be significant.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cb0525dfe75fb29a5bf5da479fd5e7a03a076f29"},"cell_type":"code","source":"# ### Nonlinear terms and Interactions","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2e40b614fe428f92bd96eafab0b6a62b1e3f897d"},"cell_type":"code","source":"# The first thing we'll do is make a fit where we put an interaction \n# between lstat and age. And that we do with a star, sort of like multiply.\n# But in this formula language, it means an interaction.\nfit5=lm(medv~lstat*age,Boston)\nsummary(fit5)\n\n# So that star in the formula means that we're going to have\n# main effects for each and the interaction.\n# And the pure interaction is indicated by a colon.\n# And while the main effect for age is not significant here,\n# the interaction is somewhat significant.\n\n# https://stackoverflow.com/questions/24192428/what-does-the-capital-letter-i-in-r-linear-regression-formula-mean\n# ?formula","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f46b5f1f4501a45e1fffa20da01f493b1436213c"},"cell_type":"code","source":"# And we saw that there was a non-linear looking scatter plot \n# between medv and lstat. And so here we explicitly put in a quadratic term.\n\n# And there's two things going on here.\n# (1) the quadratic we indicate by lstat power two.\n#     But power has a meaning in this formula language.\n#     And so if you want it to mean actually just raise lstat to\n#     the power of two, we protect it with this identity function.\n#     So the formula language doesn't dig inside this identity function.\n# \n# (2) we've put two commands in one line, which you can do in R. \n#     But you have to separate them with a semi-colon.\n#     So you can have as many commands in one line as you like, \n#     but separate them with semi-colons.\nfit6=lm(medv~lstat +I(lstat^2),Boston); summary(fit6)\n\n# And sure enough, no surprise, both coefficients are strongly\n# significant, the linear and the quadratic.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"47ebfd81edab7a067e44c9552a86d32b83817511"},"cell_type":"code","source":"# attach: That means that the named variables in Boston are\n# available in our data space.\nattach(Boston)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"861369c4fe3661f6636e2540dcdbce92c7d3eeba"},"cell_type":"code","source":"# Now, we can't use abline anymore, because that only \n# works when you've got a straight line fit.\n\n# we use points:\n# And the first argument is lstat itself.\n# The second argument are the fitted values from fit6.\n# That was our quadratic fit.\n# So the fitted values are for each value of lstat, it's the\n# fitted value from the model.\npar(mfrow=c(1,1))\nplot(medv~lstat)\npoints(lstat,fitted(fit6),col=\"red\",pch=20)\n\n# And the pch, which is the plotting character, is to be 20.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b9b72204f4e60e854bc163177cbae87c807077d9"},"cell_type":"code","source":"# we are going to fit medv as a polynomial of degree four in lstat.\npar(mfrow=c(1,1))\nplot(medv~lstat)\nfit7=lm(medv~poly(lstat,4))\nfit7\npoints(lstat,fitted(fit7),col=\"blue\",pch=20)\n#?points\n#?fitted\n# And you can see that the fourth degree polynomial is\n# getting a little bit too wiggly. \n# It's starting to over-fit the data a little bit,","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"38278c7c2da39ab3736dafe0a502bfdd9286a246"},"cell_type":"code","source":"# Let's have a look at what plotting characters are available.\n# So here's a simple way of seeing them all; plot one to\n# 20 and plotting characters one to 20.\n# We can see the whole lot. And there you see them.\nplot(1:20,1:20,pch=1:20,cex=2)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3d8550aa01e963327dbd8eb64300a0a06ba9b8f8"},"cell_type":"code","source":"###Qualitative predictors\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"07d1d617bef8783ffa618104a5caca53ec365097"},"cell_type":"code","source":"# So the command fix is a way of throwing up an editor in R.\n#fix(Carseats)\nhead(Carseats,n=10)\n# its studies on children's carseats","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4492c8eebedb2b7922d011a3db17bdfdcfb58e06"},"cell_type":"code","source":"names(Carseats)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"58954781b75a9644376efa9f9f4d39ef91c5c0dc"},"cell_type":"code","source":"summary(Carseats)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"02f5fdd4324a1d64c8d2ab5a1cbe4ae8e27c871b"},"cell_type":"code","source":"# Sales~.  : It means everything in the frame but sales.\n# Plus we're going to add in interactions between income, and advertising, \n# and age, and price.\nfit1=lm(Sales~.+Income:Advertising+Age:Price,Carseats)\nsummary(fit1)\n\n# And income and advertising appears to be strongly\n# significant.But price and age is not.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8fff4f389b3c7bcc8f576eeaa0d379cfbee30aef"},"cell_type":"code","source":"# ShelveLoc was a qualitative variable.\n# If you look at contrasts function, it shows you how R\n# will code that variable when it's put in a linear model.\n# \n# And in this case, it's a three-level factor.\n# And so it puts in two dummy variables. And the values are, \n# if ShelveLoc is, bad, zero for both.\n# If it's good, the first one is one.And the second one is zero.\n# If it's medium, see they're named actually good and\n# medium, zero and one.\ncontrasts(Carseats$ShelveLoc)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2aacfea7b6a4f634659b894776d2b5873b964c8e"},"cell_type":"code","source":"###Writing R functions","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5ebdb48bdaa91c7492e45c999c5bcf46f6514395"},"cell_type":"code","source":"regplot=function(x,y){\n  fit=lm(y~x)\n  plot(x,y)\n  abline(fit,col=\"red\")\n}","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3de94bd2a9309232d2012167e829382ed2bd212d"},"cell_type":"code","source":"attach(Carseats)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d16eb0cde10820b9cace243f3bbd0638e1823b63"},"cell_type":"code","source":"regplot(Price,Sales)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8b7478ad34dd3ce69cf1afba76f5cd2d881b4260"},"cell_type":"code","source":"# ... means these are unnamed arguments.\n# But you're allowed to add extra arguments.\n# And they'll get passed on exactly as they supplied\n# wherever they are used inside the function.\nregplot=function(x,y,...){\n  fit=lm(y~x)\n  plot(x,y,...)\n  abline(fit,col=\"red\")\n}","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2d64ecdd6244ec270dd0cdaa6c52e4da73d94fc1"},"cell_type":"code","source":"regplot(Price,Sales,xlab=\"Price\",ylab=\"Sales\",col=\"blue\",pch=20)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"236aa2ecf18574a240855e85bde59d41fa69d92e"},"cell_type":"code","source":"# my test:\n# https://stackoverflow.com/questions/17432142/plot-the-observed-and-fitted-values-from-a-linear-regression-using-xyplot-from\nset.seed(1)\nlen=50\nxtmp=seq(from=4,length=len,by=0.5)\nytmp=3*xtmp^2 +  rnorm(len, mean = 0, sd = 200)\nxtmp\nytmp\n\nfittmp1 = lm(ytmp~xtmp)\nfittmp2 = lm(ytmp~poly(xtmp,2))\n\n# linear plot\npar(mfrow=c(3,3))\nplot(xtmp,ytmp)\nabline(fittmp1,col=\"red\")\n\n# poly plot, x vc 3x^2\nplot(xtmp,ytmp)\npoints(xtmp,3*xtmp^2,col=\"green\",pch=20)\n\n# plot fitted data\nplot(xtmp,ytmp)\npoints(xtmp,fitted(fittmp2),col=\"blue\",pch=20)\n\nplot(fittmp2)\n\nsummary(fittmp2)\n\n# fitted value seems to be ytmp in this case !!\n\n# https://stackoverflow.com/questions/12201439/is-there-a-difference-between-the-r-functions-fitted-and-predict\n# The fitted function returns the y-hat values associated with the data used to fit the model. \n# The predict function returns predictions for a new set of predictor variables. \n# If you don't specify a new set of predictor variables then it will use the original data by default \n# giving the same results as fitted for some models, but if you want to predict for a new set of values \n# then you need predict. The predict function often also has options for which type of prediction to return, \n# the linear predictor, the prediction transformed to the response scale, the most likely category, \n# the contribution of each term in the model, etc.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5688afb951f33d02c737972d7e479552c412507d"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}